C51 COMPILER V9.60.0.0   PULSE_COUNT                                                       09/24/2022 11:29:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE PULSE_COUNT
OBJECT MODULE PLACED IN .\Objects\pulse_count.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE pulse_count.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listin
                    -gs\pulse_count.lst) TABS(2) OBJECT(.\Objects\pulse_count.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                 : pulse_count.c
   3          
   4          PURPOSE              :  Count pulses from a mechanical switch, optical sensor or similar devices
   5                                                                      ___
   6                                  Responds to falling edge of pulse:     |___
   7                                  Update total number of pulse count every ( MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) time.
   8                                  Check if flow rate is below a threshold value and display bargraph display.  
   9             
  10          AUTHOR               : K.M. Arun Kumar alias Arunkumar Murugeswaran
  11             
  12          KNOWN BUGS           : 
  13          
  14          NOTE                 :MAX_UPDATECALL = 1500U is used here for test purposes (in simulator).
  15                               [Because there is a limit to how fast, you can simulate pulses by hand 
  16                               by toggling switch pin(Sw_pin)( by changing Sw_pin's pin value from 
  17                               1 to 0 to 1 for a single pulse, and repeat ...]
  18          
  19          CHANGE LOGS          :
  20          
  21          *****************************************************************************/  
  22          #include "main.h"
  23          #include "port.h"
  24          
  25          #include "bargraph.h"
  26          #include "pulse_count.h"
  27          
  28          
  29          // ------ Private function prototypes ------------------------------
  30          void PULSE_COUNT_Check_Below_Threshold(const tByte);
  31          
  32          // ------ Public variable declarations -----------------------------
  33          // The data to be displayed
  34          
  35          extern tBargraph Data_G;
  36          
  37          // ------ Public variable definitions -------------------------------
  38          // Set only after falling edge is detected
  39          bit Falling_edge_G;
  40          
  41          // ------ Private variable definitions ------------------------------
  42          /* The results of successive tests of the pulse signal, with Test0 having latest 
  43            pulse signal level ie high or low level */
  44          // (NOTE: Can't have arrays of bits...)
  45          static bit Test4, Test3, Test2, Test1, Test0;
  46          
  47          /* Total_G var = instanteous value of total pulse count during period of ( MAX_UPDATECALL * SYSTEM_TICK_IN
             -TERVAL) time. */
  48          static tByte Total_G = 0;
  49          /* Calls_G var = instanteous value of total number of times that PULSE_COUNT_Update() has called, 
  50             with max value of MAX_UPDATECALL, then reset and increment every time PULSE_COUNT_Update() is called.
  51             PULSE_COUNT_Update() is called every SYSTEM_TICK_INTERVAL time.  */
  52          static tWord Calls_G = 0;
  53          
C51 COMPILER V9.60.0.0   PULSE_COUNT                                                       09/24/2022 11:29:18 PAGE 2   

  54          // ------ Private constants ----------------------------------------
  55          
  56          /* Allows changed of logic without hardware changes. 
  57           */
  58          #define HI_LEVEL (0)
  59          #define LO_LEVEL (1)
  60          
  61          #define ALARM_ON   (1)
  62          #define ALARM_OFF  (0)
  63          
  64          /* for every (MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) period of time,
  65            check if flow rate on that period is below a threshold value (PULSE_THRESHOLD)  */
  66          #define PULSE_THRESHOLD     (2U)
  67          /*  MAX_UPDATECALL = max value of Calls_G (number of times PULSE_COUNT_Update() is called). 
  68              When Calls_G == MAX_UPDATECALL, update the bargraph display pins, resets Calls_G and counts again */
  69          #define MAX_UPDATECALL      (1500U)
  70          /*------------------------------------------------------------*-
  71          FUNCTION NAME  : PULSE_COUNT_Init
  72          
  73          DESCRIPTION    :  Initialization function for the switch library.
  74                           configure sw_pin for input and initialize test bits,
  75                           which is used to sample the pulse signal level every SYSTEM_TICK_INTERVAL.
  76          
  77          INPUT          : none
  78          
  79          OUTPUT         : 
  80          
  81          NOTE           : for counter, initialize counter
  82          -*------------------------------------------------------------*/
  83          void PULSE_COUNT_Init(void)
  84             {
  85   1          /* configure this pin for input. input of pulse train is feed to this pin */
  86   1         Sw_pin = 1; 
  87   1         Alarm_pin = ALARM_OFF;
  88   1         /* configure test bits as 1 as 8051/8052 has sw_pin == 0 means that 
  89   1           switch is pressed on and sw_pin == 1, means that sw_pin has been released.
  90   1          so, test pins is initialize as logic 1, that is why falling edge is used for
  91   1          pulse count, as 0 means swich is pressed on */
  92   1         Test4 = LO_LEVEL;
  93   1         Test3 = LO_LEVEL;
  94   1         Test2 = LO_LEVEL;
  95   1         Test1 = LO_LEVEL;
  96   1         Test0 = LO_LEVEL;
  97   1         }
  98          /*------------------------------------------------------------*-
  99          FUNCTION NAME  : PULSE_COUNT_Check_Below_Threshold
 100          
 101          DESCRIPTION    :  Checks to see if pulse count is below a specified
 102            threshold value on every( MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) period time. 
 103            If it is below, sounds an alarm.
 104          
 105          INPUT          : threshold value below which if pulse count is sounds an alarm.
 106          
 107          OUTPUT         : alarm  
 108          
 109          NOTE           : this function with slight modification can be used to control the 
 110                          actuator, as difference between desired and actual value(Data_G)
 111                          is given as error value to feed input to actuator so that
 112                          desired value can be maintained.
 113                          This func is called for every( MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) period time.   
 114          -*------------------------------------------------------------*/
 115          void PULSE_COUNT_Check_Below_Threshold(const tByte THRESHOLD)
C51 COMPILER V9.60.0.0   PULSE_COUNT                                                       09/24/2022 11:29:18 PAGE 3   

 116             {
 117   1         if (Data_G < THRESHOLD)
 118   1            {
 119   2            Alarm_pin = ALARM_ON;
 120   2            }
 121   1         else
 122   1            {
 123   2            Alarm_pin = ALARM_OFF;
 124   2            }
 125   1         }
 126          /*------------------------------------------------------------*-
 127          FUNCTION NAME  : PULSE_COUNT_Update
 128          
 129          DESCRIPTION    :  This is the main switch function. 
 130                            check for falling edge of pulse. update total pulse count during period of 
 131                            ( MAX_UPDATECALL * SYSTEM_TICK_INTERVAL).On every( MAX_UPDATECALL * SYSTEM_TICK_INTERVAL)
             - 
 132                           period time, check if flow rate is below a threshold value and update the bargraph display
             -.
 133          
 134          INPUT          : counter input or switch for a pulse train.
 135          
 136          OUTPUT         :  update bargraph pins and alarm on every MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) 
 137                           period time 
 138          
 139          NOTE           :  It should be called every SYSTEM_TICK_INTERVAL ms 
 140                            (to allow for typical 20ms debounce time).
 141                             mechnical switch should require debounce time, for correct value.
 142             
 143          -*------------------------------------------------------------*/
 144          void PULSE_COUNT_Update(void)
 145             {
 146   1         // Clear timer overflow flag
 147   1         TF2 = 0;
 148   1           
 149   1           /* NOTE: if counter is used, then  dont require to check falling edge */
 150   1         // Shuffle the test results for pulse signal level with test0 having latest pulse signal level
 151   1         Test4 = Test3;
 152   1         Test3 = Test2;
 153   1         Test2 = Test1;
 154   1         Test1 = Test0;
 155   1      
 156   1         // Get latest test result
 157   1         Test0 = Sw_pin;
 158   1      
 159   1         // Required result:
 160   1         // Test4 == HI_LEVEL
 161   1         // Test3 == HI_LEVEL
 162   1         // Test1 == LO_LEVEL
 163   1         // Test0 == LO_LEVEL
 164   1      
 165   1         if ((Test4 == HI_LEVEL) && 
 166   1             (Test3 == HI_LEVEL) && 
 167   1             (Test1 == LO_LEVEL) && 
 168   1             (Test0 == LO_LEVEL))
 169   1            {
 170   2            // Falling edge detected
 171   2            Falling_edge_G = 1;
 172   2            }
 173   1         else
 174   1            {
 175   2            // falling edage is not detected
C51 COMPILER V9.60.0.0   PULSE_COUNT                                                       09/24/2022 11:29:18 PAGE 4   

 176   2            Falling_edge_G = 0;
 177   2            }
 178   1      
 179   1         /* calculate sum  for every 45 calls to this task ie every (45 * SYSTEM_TICK_INTERVAL) time,
 180   1            total pulse count is calculated for this period. It is used when pulse train is feed to counter, 
 181   1            not to the switch pin */
 182   1         //   if (++Calls_G < 45)
 183   1      
 184   1         /* 1500 used here for test purposes (in simulator) [Because there is a limit to how fast 
 185   1          you can simulate pulses by hand by toggling switch pin 1 to 0 to 1 for a single pulse ...] */
 186   1            
 187   1          /* calculate sum  for every MAX_UPDATECALL calls to this task (ie) every ( MAX_UPDATECALL  * SYSTEM_TIC
             -K_INTERVAL) time,
 188   1            total pulse count is calculated for this period  */   
 189   1         if (++Calls_G < MAX_UPDATECALL)  
 190   1            {
 191   2            /* Total_G =  instantaneous of total pulse count during the period of ( MAX_UPDATECALL * SYSTEM_TICK_IN
             -TERVAL) time.
 192   2              Total_G can have Maximum  value of 9 total pulses count on period of MAX_UPDATECALL = 1500 and SYSTEM_
             -TICK_INTERVAL = 30 time */  
 193   2              
 194   2            Total_G += (int) Falling_edge_G;
 195   2            }
 196   1         else
 197   1            {
 198   2            /* we want MAX_PULSE_CNT as 9, because it has 9 possible states, for 8 pin output port in uC, we can
             - easily adopt it */
 199   2            /* Data_G = total pulse count on every period of ( MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) time. */
 200   2            Data_G = Total_G; // Max is 9
 201   2              
 202   2            /* reset and start counting total pulse count during the period of next ( MAX_UPDATECALL * SYSTEM_TICK_
             -INTERVAL) time */ 
 203   2            Total_G = 0;
 204   2            Calls_G = 0;
 205   2            /* for every (MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) period of time, check if flow rate on that period 
             -is below a threshold value */   
 206   2            PULSE_COUNT_Check_Below_Threshold(PULSE_THRESHOLD);
 207   2            /* for every (MAX_UPDATECALL * SYSTEM_TICK_INTERVAL) period of time. Update the bargraph display pins  
             -*/
 208   2            BARGRAPH_Update();
 209   2            }
 210   1         }
 211          
 212          /*------------------------------------------------------------------*-
 213            ---- END OF FILE -------------------------------------------------
 214          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    112    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      6    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
