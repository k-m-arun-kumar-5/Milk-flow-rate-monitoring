C51 COMPILER V9.60.0.0   SIMPLE_EOS                                                        09/24/2022 11:29:18 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SIMPLE_EOS
OBJECT MODULE PLACED IN .\Objects\simple_EOS.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE simple_EOS.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listing
                    -s\simple_EOS.lst) TABS(2) OBJECT(.\Objects\simple_EOS.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                 : simple_EOS.c
   3          
   4          PURPOSE              : Main file for Simple Embedded Operating System (sEOS) for 8051. 
   5                                 Sets up Timer 2 to drive the simple EOS. ISR of Timer 2, which
   6                                 calls application code. In our case flow rate monitoring and update
   7                                 display bargraph. Then calls system task, in our case, sEOS_Go_To_Sleep() 
   8                                 is system task , to put CPU in idle mode , to save power.                       
   9             
  10          AUTHOR               : K.M. Arun Kumar alias Arunkumar Murugeswaran
  11             
  12          KNOWN BUGS           : 
  13          
  14          NOTE                 : implements sEOS, a simple time triggered ,nonpremptive and single application task 
             -executing embedded OS.
  15          
  16          CHANGE LOGS          :
  17          
  18          *****************************************************************************/  
  19          
  20          #include "main.h"
  21          #include "simple_EOS.h"
  22          #include "port.h"
  23          #include "pulse_count.h"
  24          
  25          /* time unit of system tick interval.  eg for 1 msec resolution of Timer 2 delay,
  26             TIME_UNIT = 1000, as  1 / TIME_UNIT = 1 msec. for 20 msec resolution of Timer 2 delay, 
  27          TIME_UNIT = 50 as 1/50 = 20 msec.
  28          SYSTEM_TICK_INTERVAL should be exact multiple of resolution of Timer 2 delay.  */
  29          #define TIME_UNIT   (1000UL)
  30          /*------------------------------------------------------------*-
  31          FUNCTION NAME  : sEOS_ISR
  32          
  33          DESCRIPTION    :  Invoked periodically of SYSTEM_TICK_INTERVAL in msec by Timer 2 overflow interrupt: 
  34           
  35            
  36          INPUT          : none
  37          
  38          OUTPUT         : 
  39          
  40          NOTE           :  see sEOS_Init_Timer2() for timing details.
  41          -*------------------------------------------------------------*/
  42          
  43          void sEOS_ISR() interrupt INTERRUPT_Timer_2_Overflow
  44             {
  45   1         /* Must manually reset the T2 overflow flag, still Timer 2 reload with recapture 
  46   1            register values and automatically starts  T2 timer running */  
  47   1         TF2 = 0;    
  48   1      
  49   1       //===== USER CODE - Begin (perodic(SYSTEM_TICK_INTERVAL in msec) executing application task) =======
  50   1      
  51   1         /* Call (application task) flow rate every SYSTEM_TICK_INTERVAL time interval */ 
  52   1         PULSE_COUNT_Update();
  53   1      
C51 COMPILER V9.60.0.0   SIMPLE_EOS                                                        09/24/2022 11:29:18 PAGE 2   

  54   1         //===== USER CODE - End =========================================
  55   1         }
  56          /*------------------------------------------------------------*-
  57          FUNCTION NAME  : sEOS_Init_Timer2
  58          
  59          DESCRIPTION    :  Sets up Timer 2 to drive the simple EOS. 
  60            
  61          INPUT          :  Parameter gives system tick interval in MILLISECONDS.
  62                            Max system tick interval is ~65ms (12 MHz oscillator).
  63          
  64          OUTPUT         : 
  65          
  66          NOTE           :  Precise tick intervals are only possible with certain 
  67            oscillator / tick interval combinations. For eg If timing is important,
  68            you should check the timing calculations manually by using simulator. 
  69            If you require both accurate baud rates and accurate EOS timing, use an
  70            11.0592 MHz crystal and a tick rate of 5, 10, 15, … 60 or 65 ms. 
  71            Such ‘divide by 5’ tick rates are precise with an 11.0592 MHz crystal.
  72          -*------------------------------------------------------------*/
  73          void sEOS_Init_Timer2(const tByte TICK_MS)
  74             {
  75   1         tLong Inc;
  76   1         tWord Reload_16;
  77   1         tByte Reload_08H, Reload_08L;
  78   1      
  79   1         /*  Timer 2 is configured as a 16-bit timer, which is automatically reloaded 
  80   1            with recapture register values when it overflows */
  81   1         T2CON   = 0x04;   // Load Timer 2 control register
  82   1      
  83   1         // Number of timer increments required (max 65536)
  84   1         Inc = (tLong)((TICK_MS * OSC_FREQ)/(tLong)(TIME_UNIT * OSC_PER_INST));   
  85   1      
  86   1         // 16-bit reload value
  87   1         Reload_16 = (tWord) (65536UL - Inc);
  88   1      
  89   1         // 8-bit reload values (High & Low)
  90   1         Reload_08H = (tByte)(Reload_16 / 256);
  91   1         Reload_08L = (tByte)(Reload_16 % 256);
  92   1      
  93   1         // Used for manually checking timing (in simulator) by using preload value for Timer 2
  94   1         RELOADH_PORT = Reload_08H;
  95   1         RELOADL_PORT = Reload_08L; 
  96   1      
  97   1         TH2     = Reload_08H;   // Load Timer 2 high byte
  98   1         RCAP2H  = Reload_08H;   // Load Timer 2 reload capture register high byte
  99   1         TL2     = Reload_08L;   // Load Timer 2 low byte
 100   1         RCAP2L  = Reload_08L;   // Load Timer 2 reload capture register low byte
 101   1      
 102   1         /* Timer 2 interrupt is enabled, and ISR will be called,  whenever the timer overflows.
 103   1          MAKE sure uC global interrupt is enabled */
 104   1         ET2     = 1;
 105   1      
 106   1         /* Start Timer 2 running */
 107   1         TR2   = 1;     
 108   1      
 109   1         EA = 1;            // Globally enable interrupts
 110   1         }
 111          /*------------------------------------------------------------*-
 112          FUNCTION NAME  : sEOS_Go_To_Sleep
 113          
 114          DESCRIPTION    :  This operating system enters 'idle mode' between clock ticks
 115            to save power.  The next system tick will return the processor to the normal operating state.
C51 COMPILER V9.60.0.0   SIMPLE_EOS                                                        09/24/2022 11:29:18 PAGE 3   

 116            
 117          INPUT          : none
 118          
 119          OUTPUT         : 
 120          
 121          NOTE           : ADAPT AS REQUIRED FOR YOUR HARDWARE.
 122                           once an interrupt or HW reset is received by uC, uC awakens and starts executing ISR
 123                           of the interrupt, then executes instruction following the PCON |= 0x01, which had put uC i
             -n idle mode.
 124                           
 125          -*------------------------------------------------------------*/
 126          void sEOS_Go_To_Sleep(void)
 127             {
 128   1         PCON |= 0x01;    // Enter idle mode (generic 8051 version)
 129   1         }
 130          
 131          /*------------------------------------------------------------------*-
 132            ---- END OF FILE -------------------------------------------------
 133          -*------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    128    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       4
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
